
	mkdir health-management-system  

	cd health-management-system  

	npm init -y  

	npm install express mongoose bcryptjs jsonwebtoken body-parser cors socket.io

	// models/User.js  

	const mongoose = require('mongoose');  

	  

	const UserSchema = new mongoose.Schema({  

	  username: { type: String, required: true, unique: true },  

	  password: { type: String, required: true },  

	  name: { type: String, required: true },  

	  age: { type: Number },  

	  gender: { type: String, enum: ['male', 'female', 'other'] },  

	  healthData: [{  

	    type: mongoose.Schema.Types.ObjectId,  

	    ref: 'HealthData'  

	  }],  

	  role: { type: String, enum: ['user', 'admin'], default: 'user' }  

	});  

	  

	module.exports = mongoose.model('User', UserSchema);  

	  

	// models/HealthData.js  

	const mongoose = require('mongoose');  

	  

	const HealthDataSchema = new mongoose.Schema({  

	  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },  

	  weight: { type: Number },  

	  bloodPressure: { type: String }, // e.g., "120/80"  

	  bloodSugar: { type: Number },  

	  date: { type: Date, default: Date.now }  

	});  

	  

	module.exports = mongoose.model('HealthData', HealthDataSchema);

	// routes/auth.js  

	const express = require('express');  

	const router = express.Router();  

	const bcrypt = require('bcryptjs');  

	const jwt = require('jsonwebtoken');  

	const User = require('../models/User');  

	const { secret } = require('../config'); // Assume you have a config file with JWT secret  

	  

	// Register  

	router.post('/register', async (req, res) => {  

	  const { username, password, name, age, gender } = req.body;  

	  const hashedPassword = await bcrypt.hash(password, 10);  

	  const user = new User({ username, password: hashedPassword, name, age, gender });  

	  try {  

	    await user.save();  

	    res.status(201).send('User registered successfully');  

	  } catch (error) {  

	    res.status(400).send(error.message);  

	  }  

	});  

	  

	// Login  

	router.post('/login', async (req, res) => {  

	  const { username, password } = req.body;  

	  try {  

	    const user = await User.findOne({ username });  

	    if (!user || !(await bcrypt.compare(password, user.password))) {  

	      return res.status(400).send('Invalid credentials');  

	    }  

	    const token = jwt.sign({ userId: user._id, role: user.role }, secret, { expiresIn: '1h' });  

	    res.json({ token });  

	  } catch (error) {  

	    res.status(500).send('Server error');  

	  }  

	});  

	  

	module.exports = router;
